services:
  db:
    container_name: sqlite_locale
    image: nouchka/sqlite3:latest
    volumes: 
      - ./data/db:/data
    environment:
      - SQLITE3_DB=db.sqlite3
    #command: /bin/sh "sqlite3 /root/db/db.sqlite3 '.databases' && exit 0"
    networks:
      - web_network
  sqlite-web:
    container_name: sqlite_webview_locale
    image: coleifer/sqlite-web
    volumes:
      - ./data/db:/data  # Ensure it shares the same database directory
    ports:
      - "8080:8080"
    environment:
      - SQLITE_WEB_PASSWORD=local
    command: sqlite_web -H 0.0.0.0 -x db.sqlite3 --password
    depends_on:
      - db
    networks:
      - web_network

  backend:
    container_name: backend_locale
    build:
      context: backend/.
      dockerfile: Dockerfile
    command: sh -c "python manage.py collectstatic --noinput && gunicorn --workers=4 --threads=2 --timeout 120 --bind 0.0.0.0:5000 src.wsgi:application"
    volumes: 
      - ./backend:/backend:z  # Add ":z" to prevent permission issues
      - /backend/__pycache__  # Avoid caching issues inside the container
      - backend_static:/backend/static
    ports:
      - "5000:5000"
    cpus: "1.0"
    mem_limit: 512m
    mem_reservation: 256m
    depends_on:
      - db
    environment:
      - DOCKER=true
      - DJANGO_ALLOWED_HOSTS=demo.experiencebylocals.com localhost backend_locale nginx
      - DJANGO_CSRF_TRUSTED_ORIGINS=https://demo.experiencebylocals.com
    networks:
      - web_network

  frontend:
    container_name: frontend_locale
    build:
      context: frontend/.
      dockerfile: Dockerfile
    environment:
      - BACKEND_API_PORT=${BACKEND_API_PORT}
      - CHOKIDAR_USEPOLLING=true
    #volumes:
      #- ./frontend/dist:/usr/share/nginx/html:ro  # Mount the React build directory
    depends_on:
      - backend
    networks:
      - web_network
    volumes:
      - frontend_build:/frontend/dist

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      #- ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/usr/share/nginx/html:ro  # Mount built frontend files from frontend container
      - backend_static:/backend/static:ro
    depends_on:
      - frontend
      - backend
    networks:
      - web_network

networks:
  web_network:
    driver: bridge

volumes:
  backend_static:
  frontend_build: